y<-NULL
convert_links <- function(x) {
for(n in names(x)) {
if(is.character(x[[n]])) {
test <- grepl("^http", x[[n]])
x[[n]][test] <- paste0('<a href="',
x[[n]][test],
'" target="_blank">',
x[[n]][test],
'</a>')
}
}
x
}
getLocations <- function(call){
json <- jsonlite::fromJSON(call,flatten=TRUE)$value
locs <- json$location.coordinates
locs <- as.data.frame(do.call(rbind,locs))
names(locs) <- c("lon","lat")
json <- cbind(json,locs)
json <- sf::st_as_sf(json, coords = c('lon','lat'), crs = 4326)
json$location.coordinates <- NULL
return(json)
}
api_nmed <- "https://e-enterprise-test.apigee.net/sdwis/sta/v1.0"
getLocationsCall <- function(call){
json <- jsonlite::fromJSON(call,flatten=TRUE)$value
locs <- json$location.coordinates
locs <- as.data.frame(do.call(rbind,locs))
names(locs) <- c("lon","lat")
json <- cbind(json,locs)
json <- sf::st_as_sf(json, coords = c('lon','lat'), crs = 4326)
json$location.coordinates <- NULL
return(json)
}
call <- URLencode(paste0(api,"/Locations"))
response <- jsonlite::fromJSON(URLencode(paste0(call,"?$count=true")))
call <- URLencode(paste0(api_nmed,"/Locations"))
response <- jsonlite::fromJSON(URLencode(paste0(call,"?$count=true")))
response
response$@iot.count
sta_locs_as_sf <- function(json){
locs <- json$location.coordinates
locs <- as.data.frame(do.call(rbind,locs))
names(locs) <- c("lon","lat")
json <- cbind(json,locs)
json <- sf::st_as_sf(json, coords = c('lon','lat'), crs = 4326)
json$location.coordinates <- NULL
return(json)
}
getLocationsCall <- function(call){
json <- jsonlite::fromJSON(call,flatten=TRUE)$value
json<-sta_locs_as_sf(json)
}
x<-getLocationsCall <- function(call){
json <- jsonlite::fromJSON(call,flatten=TRUE)$value
json<-sta_locs_as_sf(json)
}
x
x <- getLocationsCall(call)
rm(x)
json <- jsonlite::fromJSON(call,flatten=TRUE)$value
locs <- json$location.coordinates
locs <- as.data.frame(do.call(rbind,locs))
locs <- json$location.coordinates
names(locs) <- c("lon","lat")
locs <- as.data.frame(do.call(rbind,locs))
json$location.coordinates
as.matrix(json$location.coordinates)
x<-as.matrix(json$location.coordinates)
x
View(x)
d  <-  as.data.frame(matrix(unlist(json$location.coordinates), nrow=length(unlist(json$location.coordinates[1])))
)
d <- t(d)
View(d)
d  <-  matrix(unlist(json$location.coordinates))
21604/2
table(json$location.type)
table(json$location.coordinates)
table(json$location.coordinates[2])
table(json$location.coordinates[1])
table(json$location.coordinates[1,2])
table(json$location.coordinates[[1]])
table(unlist(json$location.coordinates))
json <- jsonlite::fromJSONcall,(simplifyDataFrame = TRUE)
json <- jsonlite::fromJSON(call,simplifyDataFrame = TRUE)
json <- jsonlite::fromJSON(call,simplifyDataFrame = TRUE,flatten=TRUE)
json$value$location.coordinates
View(json$value$location.coordinates)
df<-unlist(json$value$location.coordinates)
21604/2
x<-json$value$location.coordinates
x
df<-x[sapply(x, is.null)]<-NA
df
x
df<-x[sapply(x, function(x) length(x)==0L)]<-NA
df
x
View(x)
write.csv(x,"x.csv")
x <-t(d)
21604
21604/2
json <- jsonlite::fromJSON(call)
devtools::install_github("internetofwater/sta4R")
install.packages("devtools")
devtools::install_github("internetofwater/sta4R")
devtools::install_github("internetofwater/sta4R")
ls
devtools::document()
install.packages("mapview")
install.packages("mtimetk")
install.packages("timetk")
devtools::document()
sta_demo("https://sta-demo.internetofwater.dev/api/v1.1")
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
library(sta4R)
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
library("sta4R")
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
devtools::install_github("internetofwater/sta4R")
library(sta4R)
devtools::install_github("internetofwater/sta4R")
devtools::install_github("internetofwater/sta4R",force=TRUE)
library(sta4R)
library("sta4R")
library(sta4R)
sta4R::sta_mapview()
?sta4R::sta_mapview()
remove.packages("sta4R")
devtools::install_github("internetofwater/sta4R")
library(sta4R)
source('~/Documents/GitHub/sta4R/R/sta_mapping.R')
source('~/Documents/GitHub/sta4R/R/sta_GET_methods_Locations.R')
source('~/Documents/GitHub/sta4R/R/iterator.R')
sta_mapview("https://")
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
remove.packages("sta4R")
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
install.packages("mapview")
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
install.packages("mapview")
sta_mapview("https://sta-demo.internetofwater.dev/api/v1.1")
library(mapview)
